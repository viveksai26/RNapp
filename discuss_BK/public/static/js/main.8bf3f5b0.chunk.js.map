{"version":3,"sources":["App.js","serviceWorker.js","notFound.js","index.js"],"names":["App","props","handleName","e","setState","name","target","value","localStorage","setItem","handleComment","comment","getComments","console","log","state","comments","length","result","getFormattedTimeStamp","slice","pop","timestamp","fetch","method","headers","body","JSON","stringify","match","params","id","then","resp","json","data","createComment","question","postComment","res","Date","res3","toJSON","toString","this","getQuestion","initialComments","getName","setInterval","getItem","TimeStamp","reverse","items","map","item","key","ListGroup","Item","commentId","commentName","style","float","Container","Navbar","Brand","href","Toggle","Collapse","className","Card","Body","Title","Text","Button","variant","onClick","Form","Group","controlId","Label","Control","size","type","onChange","placeholder","as","rows","Component","Boolean","window","location","hostname","Notfound","routing","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8bf3f5b0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Card, Button, Navbar, Form, ListGroup } from 'react-bootstrap'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      question: '',\n      name: '',\n      comments: [],\n      postComment: ''\n    }\n  }\n\n\n  componentDidMount() {\n    var res = new Date();\n    var res1 = res.toJSON();\n    var res3 = res1.slice(0, 10)+' '+ res.toString().slice(16,25);\n    this.getQuestion();\n    this.initialComments(res3);\n    this.getName();\n    setInterval(() => {this.getComments();console.log(this.state);\n    },5000)\n  }\n\n  getName() {\n    this.setState({\n      name: localStorage.getItem('name')\n    })\n  }\n\n  handleName = (e) => {\n    this.setState({\n      name: e.target.value\n    })\n    localStorage.setItem('name', e.target.value)\n  }\n\n  handleComment = (e) => {\n    this.setState({\n      comment: e.target.value\n    })\n  }\n\n  getQuestion() {\n    fetch('/getQuestion/' + this.props.match.params.id).then(resp =>\n      resp.json()\n    ).then(data => {\n      if (data[0].length) {\n        console.log(data);\n        this.setState({\n          question: data[0][0].question\n        })\n      }\n    })\n  }\n\n  initialComments(TimeStamp) {\n    console.log('in initial comment timestamp received',TimeStamp);\n    if(TimeStamp==='old'){\n      if(this.state.comments.length){\n        TimeStamp = this.getFormattedTimeStamp(this.state.comments[0].timestamp)\n        console.log(TimeStamp, 'load previous timestamp');\n        \n      fetch('/initialComments', {\n        method: 'post',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          \"timestamp\": TimeStamp,\n          \"question_id\": this.props.match.params.id\n        })\n      }).then(resp => resp.json()).then(data => {\n        this.setState({\n          comments: [...data[0].reverse(),...this.state.comments]\n        })\n      })\n      }\n    }else{\n      fetch('/initialComments', {\n        method: 'post',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          \"timestamp\": TimeStamp,\n          \"question_id\": this.props.match.params.id\n        })\n      }).then(resp => resp.json()).then(data => {\n        console.log(data);\n        this.setState({\n          comments: data[0].reverse()\n        })\n      })\n    }\n  }\n\n  getFormattedTimeStamp(TimeStamp){\n    var res = new Date(TimeStamp)\n    var res1 = res.toJSON();\n    var res3 = res1.slice(0, 10)+' '+ res.toString().slice(16,25);\n    return res3\n  }\n\n  getComments=()=>{\n    console.log('in get Commentss',this.state.comments);\n    \n    if(this.state.comments.length){\n    var result = this.getFormattedTimeStamp(this.state.comments.slice(-1).pop().timestamp)\n    console.log('in get Commentss time',result);\n    fetch('/getComments', {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        \"timestamp\": result,\n        \"question_id\": this.props.match.params.id\n      })\n    }).then(resp => resp.json()).then(data => {\n      console.log('data',data,'data[0]',data[0]);\n      this.setState({\n        comments: [...this.state.comments, ...data[0]]\n      })\n    })\n    }\n  }\n\n\n  createComment = () => {\n    console.log('in create comment function',{\n      \"comment\": this.state.comment,\n      \"question_id\": this.props.match.params.id,\n      \"commentName\": this.state.name\n    });\n    fetch('/createComment', {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        \"comment\": this.state.comment,\n        \"question_id\": this.props.match.params.id,\n        \"commentName\": this.state.name\n      })\n    }).then(resp =>\n      resp.json()\n    ).then(data =>{\n      console.log('in result data',data);\n    this.getComments();\n    }\n    )\n  }\n\n  render() {\n    const items = this.state.comments.map((item, key) =>\n      <ListGroup.Item key={item.commentId}>{item.commentId} : {item.commentName} : {item.comment} <span style={{float:'right'}}>{this.getFormattedTimeStamp(item.timestamp)}</span> </ListGroup.Item>\n    );\n    return (\n      <Container>\n        <Navbar>\n          <Navbar.Brand href=\"#home\">DISK</Navbar.Brand>\n          <Navbar.Toggle />\n          <Navbar.Collapse className=\"justify-content-end\">\n          </Navbar.Collapse>\n        </Navbar>\n        <Card >\n          <Card.Body>\n            <Card.Title>Question</Card.Title>\n            <Card.Text>\n              \n              {this.state.question}\n              </Card.Text>\n          </Card.Body>\n        </Card>\n\n\n        <Card >\n          <Card.Body>\n            <Card.Title>Discussion</Card.Title>\n            <Button variant=\"light\" onClick={()=>{this.initialComments('old')}}>Load Previous</Button>\n            <ListGroup variant=\"flush\">\n              {items}\n            </ListGroup>\n          </Card.Body>\n        </Card>\n\n        <Card>\n          <Card.Body>\n            <Form>\n              <Form.Group controlId=\"formBasicName\">\n                <Form.Label>Name</Form.Label>\n                <Form.Control size=\"sm\" type=\"text\" value={this.state.name} onChange={this.handleName} placeholder=\"YourName\" />\n              </Form.Group>\n              <Form.Group controlId=\"formBasicComment\">\n                <Form.Label>Add your comment below</Form.Label>\n                <Form.Control value={this.state.comment} onChange={this.handleComment} as=\"textarea\" rows=\"3\" />\n                <Form.Text className=\"text-muted\">\n                  We'll never share your email with anyone else.\n                   </Form.Text>\n              </Form.Group>\n              <Button variant=\"primary\" onClick={this.createComment}>\n                Submit\n              </Button>\n              <Button variant=\"light\" onClick={()=>{this.getComments()}}>Refresh</Button>\n            </Form>\n\n\n\n          </Card.Body>\n        </Card>\n      </Container>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nconst Notfound = () => <h1>Not found</h1>\r\nexport default Notfound","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Route, BrowserRouter as Router,Switch  } from 'react-router-dom'\nimport Notfound from './notFound'\n\nconst routing = (\n  <Router>\n    <div>\n      <Switch>\n      <Route exact path=\"/app/:id\" component={App} />\n      <Route component={Notfound} />\n      </Switch>\n    </div>\n  </Router>\n)\n\nReactDOM.render(routing, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}